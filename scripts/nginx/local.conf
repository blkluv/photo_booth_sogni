server {
    listen 80;
    server_name photobooth-local.sogni.ai photobooth-api-local.sogni.ai;
    
    # Redirect HTTP to HTTPS
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;
    server_name photobooth-local.sogni.ai;

    # SSL configuration
    ssl_certificate /opt/homebrew/etc/nginx/ssl/sogni-local.crt;
    ssl_certificate_key /opt/homebrew/etc/nginx/ssl/sogni-local.key;
    
    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Content-Type-Options "nosniff" always;
    # Allow iframe embedding for browser extension - comment out or change to ALLOWALL
    # add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Frame-Options "ALLOWALL" always;
    add_header X-XSS-Protection "1; mode=block" always;
    
    # Faster nginx core settings to reduce latency
    tcp_nodelay on;         # Disable Nagle's algorithm
    tcp_nopush off;         # For streaming applications
    keepalive_timeout 65;   # Keep connections alive
    sendfile on;            # Optimization for sending files
    
    # Gallery images - serve directly and return 404 for missing files
    location /gallery/ {
        proxy_pass http://localhost:5175;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Don't fallback to index.html for missing gallery files
        proxy_intercept_errors on;
        error_page 404 = @return404;
        
        proxy_connect_timeout 5s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }
    
    # Return proper 404 for missing gallery images
    location @return404 {
        return 404;
    }

    # Frontend assets on port 5175
    location / {
        proxy_pass http://localhost:5175;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header Referer $http_referer;
        
        # Set reasonable timeouts
        proxy_connect_timeout 10s;     # Reduced for faster failure detection
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }
}

server {
    listen 443 ssl;
    server_name photobooth-api-local.sogni.ai;

    # SSL configuration (ensure cert covers both domains or use separate certs)
    ssl_certificate /opt/homebrew/etc/nginx/ssl/sogni-local.crt; 
    ssl_certificate_key /opt/homebrew/etc/nginx/ssl/sogni-local.key;

    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "SAMEORIGIN" always; # Consider if needed for API
    add_header X-XSS-Protection "1; mode=block" always;

    client_max_body_size 50M; # Allow larger image uploads

    # Hide CORS headers from backend to prevent duplication
    proxy_hide_header 'Access-Control-Allow-Origin';
    proxy_hide_header 'Access-Control-Allow-Methods';
    proxy_hide_header 'Access-Control-Allow-Headers';
    proxy_hide_header 'Access-Control-Allow-Credentials';
    proxy_hide_header 'Access-Control-Expose-Headers';

    # Allow requests from the frontend domain
    add_header 'Access-Control-Allow-Origin' 'https://photobooth-local.sogni.ai' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE, PATCH' always;
    add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,X-Client-App-ID' always; # Added X-Client-App-ID
    add_header 'Access-Control-Allow-Credentials' 'true' always; # If cookies/auth needed
    add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;

    # Faster nginx core settings to reduce latency
    tcp_nodelay on;         # Disable Nagle's algorithm
    tcp_nopush off;         # For streaming applications
    keepalive_timeout 65;   # Keep connections alive
    sendfile on;            # Optimization for sending files
    
    # Global connection optimization
    proxy_connect_timeout 10s;       # Reduced for faster failure detection
    proxy_send_timeout 60s;
    proxy_read_timeout 120s;         # 2 minutes for standard endpoints
    
    # Root location handles all API requests now
    location / { 
        # No rewrite needed as the /api/ prefix is gone
        proxy_pass http://localhost:3001;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade"; # Keep for potential WebSockets
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Special configuration for SSE connections
    location /sogni/progress/ {
        proxy_pass http://localhost:3001;
        proxy_http_version 1.1;
        proxy_set_header Connection "";  # Empty Connection header for SSE
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Critical SSE optimizations
        proxy_buffering off;
        proxy_cache off;
        tcp_nodelay on;                 # Added to reduce latency
        tcp_nopush off;                 # Disable Nagle's algorithm
        proxy_read_timeout 86400s;
        chunked_transfer_encoding on;
        
        # Performance optimization
        proxy_connect_timeout 3s;       # Reduced from default for faster failure detection
        proxy_send_timeout 60s;
    }
    
    # Fast health check
    location = /health {
        proxy_pass http://localhost:3001/health;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        access_log off;
        proxy_connect_timeout 2s;
        proxy_read_timeout 5s;
    }
} 